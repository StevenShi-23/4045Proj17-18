Id|Body
35823399|"Adding this answer for completeness, though it's only usable under certain conditions.

If you have very large lists, removing from the end of the list avoids CPython internals having to <code><<memmove>></code>, for situations where you can re-order the list. It gives a performance gain to remove from the end of the list, since it won't need to <code><<memmove>></code> every item after the one your removing - back one step (1).
For one-off removals the performance difference may be acceptable, but if you have a large list and need to remove many items - you will likely notice a performance hit.

Although admittedly, in these cases, doing a full list search is likely to be a performance bottleneck too, unless items are mostly at the front of the list.

This method can be used for more efficient removal,as long as re-ordering the list is acceptable. (2)

<code><<def>> <<remove_unordered(>><<ls>>, <<item>>)<<:>>
    <<i>> <<=>> <<ls>>.<<index(>><<item>>)
    <<ls>>[-<<1>>], <<ls>>[<<i>>] <<=>> <<ls>>[<<i>>], <<ls>>[-<<1>>]
    <<ls>>.<<pop(>>)
</code>

You may want to avoid raising an error when the <code><<item>></code> isn't in the list.

<code><<def>> <<remove_unordered_test(>><<ls>>, <<item>>)<<:>>
    <<try>><<:>>
        <<i>> <<=>> <<ls>>.<<index(>><<item>>)
    <<except>> <<ValueError>><<:>>
        <<return>> <<False>>
    <<ls>>[-<<1>>], <<ls>>[<<i>>] <<=>> <<ls>>[<<i>>], <<ls>>[-<<1>>]
    <<ls>>.<<pop(>>)
    <<return>> <<True>>
</code>




While I tested this with CPython, its quite likely most/all other Python implementations use an array to store lists internally. So unless they use a sophisticated data structure designed for efficient list re-sizing, they likely have the same performance characteristic.



  A simple way to test this, compare the speed difference from removing from the front of the list with removing the last element:

<code><<python>> -<<m>> <<timeit>> '<<a = [0]>> * <<100000>>' '<<while>> <<a:>> <<a>>.<<remove(0>>)'
</code>
  
  With:

<code><<python>> -<<m>> <<timeit>> '<<a = [0]>> * <<100000>>' '<<while>> <<a:>> <<a>>.<<pop>>()'
</code>
  
  (gives an order of magnitude speed difference where the second example is faster with CPython and PyPy).



In this case you might consider using a <code><<set>></code>, especially if the list isn't meant to store duplicates.In practice though you may need to store mutable data which can't be added to a <code><<set>></code>. Also check on btree's if the data can be ordered.

"
45074712|"Python classes are themselves objects - as in instance - of their meta-class. 

The default metaclass, which is applied when when you determine classes as:

<code><<class>> <<foo>><<:>>
    ...
</code>

meta class are used to apply some rule to an entire set of classes. For example, suppose you're building an ORM to access a database, and you want records from each table to be of a class mapped to that table (based on fields, business rules, etc..,), a possible use of metaclass is for instance, connection pool logic, which is share by all classes of record from all tables. Another use is logic to to support foreign keys, which involves multiple classes of records. 

when you define metaclass, you subclass type, and can overrided the following magic methods to insert your logic. 

<code><<class>> <<somemeta(>><<type>>)<<:>>
    <<__new__(>><<mcs>>, <<name>>, <<bases>>, <<clsdict>>)<<:>>
      """"""
  <<mcs>><<:>> <<is>> <<the>> <<base>> <<metaclass>>, <<in>> <<this>> <<case>> <<type>>.
  <<name>><<:>> <<name>> <<of>> <<the>> <<new>> <<class>>, <<as>> <<provided>> <<by>> <<the>> <<user>>.
  <<bases>><<:>> <<tuple>> <<of>> <<base>> <<classes>> 
  <<clsdict>><<:>> <<a>> <<dictionary>> <<containing>> <<all>> <<methods>> <<and>> <<attributes>> <<defined>> <<on>> <<class>>

  <<you>> <<must>> <<return>> <<a>> <<class>> <<object>> <<by>> <<invoking>> <<the>> <<__new__>> <<constructor>> <<on>> <<the>> <<base>> <<metaclass>>. 
 <<ie>><<:>> 
    <<return>> <<type>>.<<__call__(>><<mcs>>, <<name>>, <<bases>>, <<clsdict>>).

  <<in>> <<the>> <<following>> <<case>><<:>>

  <<class>> <<foo(>><<baseclass>>)<<:>>
        <<__metaclass__>> <<=>> <<somemeta>>

  <<an_attr>> <<=>> <<12>>

  <<def>> <<bar(>><<self>>)<<:>>
      ...

  <<@>><<classmethod>>
  <<def>> <<foo(>><<cls>>)<<:>>
      ...

      <<arguments>> <<would>> <<be>> <<:>> ( <<somemeta>>, ""<<foo>>"", (<<baseclass>>, <<baseofbase>>,..., <<object>>), <<{>>""<<an_attr>>""<<:>><<12>>, ""<<bar>>""<<:>> <<&lt>>;<<function>><<&gt>>;, ""<<foo>>""<<:>> <<&lt>>;<<bound>> <<class>> <<method>><<&gt>>;<<}>>

      <<you>> <<can>> <<modify>> <<any>> <<of>> <<these>> <<values>> <<before>> <<passing>> <<on>> <<to>> <<type>>
      """"""
      <<return>> <<type>>.<<__call__(>><<mcs>>, <<name>>, <<bases>>, <<clsdict>>)


    <<def>> <<__init__(>><<self>>, <<name>>, <<bases>>, <<clsdict>>)<<:>>
      """""" 
      <<called>> <<after>> <<type>> <<has>> <<been>> <<created>>. <<unlike>> <<in>> <<standard>> <<classes>>, <<__init__>> <<method>> <<cannot>> <<modify>> <<the>> <<instance>> (<<cls>>) - <<and>> <<should>> <<be>> <<used>> <<for>> <<class>> <<validaton>>.
      """"""
      <<pass>>


    <<def>> <<__prepare__(>>)<<:>>
        """"""
        <<returns>> <<a>> <<dict>> <<or>> <<something>> <<that>> <<can>> <<be>> <<used>> <<as>> <<a>> <<namespace>>.
        <<the>> <<type>> <<will>> <<then>> <<attach>> <<methods>> <<and>> <<attributes>> <<from>> <<class>> <<definition>> <<to>> <<it>>.

        <<call>> <<order>> <<:>>

        <<somemeta>>.<<__new__>> -<<&gt>>;  <<type>>.<<__new__>> -<<&gt>>; <<type>>.<<__init__>> -<<&gt>>; <<somemeta>>.<<__init__>> 
        """"""
        <<return>> <<dict(>>)

    <<def>> <<mymethod(>><<cls>>)<<:>>
        """""" <<works>> <<like>> <<a>> <<classmethod>>, <<but>> <<for>> <<class>> <<objects>>. <<Also>>, <<my>> <<method>> <<will>> <<not>> <<be>> <<visible>> <<to>> <<instances>> <<of>> <<cls>>.
        """"""
        <<pass>>
</code>

anyhow, those two are the most commonly used hooks. metaclassing is powerful, and above is nowhere near and exhaustive list of uses for metaclassing. 
"
13891070|"The <code><<time>>.<<time(>>)</code> function returns the number of seconds since the epoch as seconds in UTC.

Here is some sample output I ran on my computer, converting it to a string as well.

<code><<Python>> <<2.7>><<.3>> (<<default>>, <<Apr>> <<24>> <<2012>>, <<00>><<:>><<00>><<:>><<54>>) 
[<<GCC>> <<4.7>><<.0>> <<20120414>> (<<prerelease>>)] <<on>> <<linux2>>
<<Type>> ""<<help>>"", ""<<copyright>>"", ""<<credits>>"" <<or>> ""<<license>>"" <<for>> <<more>> <<information>>.
<<&gt>>;<<&gt>>;<<&gt>>; <<import>> <<time>>
<<&gt>>;<<&gt>>;<<&gt>>; <<ts>> <<=>> <<time>>.<<time(>>)
<<&gt>>;<<&gt>>;<<&gt>>; <<print>> <<ts>>
<<1355563265.81>>
<<&gt>>;<<&gt>>;<<&gt>>; <<import>> <<datetime>>
<<&gt>>;<<&gt>>;<<&gt>>; <<st>> <<=>> <<datetime>>.<<datetime>>.<<fromtimestamp(>><<ts>>).<<strftime(>>'<<%Y-%m-%d>> <<%H:%M:%S>>')
<<&gt>>;<<&gt>>;<<&gt>>; <<print>> <<st>>
<<2012>>-<<12>>-<<15>> <<0>><<1>><<:>><<21>><<:>><<0>><<5>>
<<&gt>>;<<&gt>>;<<&gt>>;
</code>

The <code><<ts>></code> variable is the time returned in seconds.  I then converted it to a string using the <code><<datetime>></code> library making it a string that is human readable. 
"
37403193|"Here's a fast generator that uses a dict to store each element as a key with a boolean value for checking if the duplicate item has already been yielded.

For lists with all elements that are hashable types:

<code><<def>> <<gen_dupes(>><<array>>)<<:>>
    <<unique>> <<=>> <<{>><<}>>
    <<for>> <<value>> <<in>> <<array>><<:>>
        <<if>> <<value>> <<in>> <<unique>> <<and>> <<unique>>[<<value>>]<<:>>
            <<unique>>[<<value>>] <<=>> <<False>>
            <<yield>> <<value>>
        <<else>><<:>>
            <<unique>>[<<value>>] <<=>> <<True>>

<<array>> <<=>> [<<1>>, <<2>>, <<2>>, <<3>>, <<4>>, <<1>>, <<5>>, <<2>>, <<6>>, <<6>>]
<<print(>><<list(>><<gen_dupes(>><<array>>)))
# <<=&gt;>> <<[2>>, <<1>>, <<6]>>
</code>

For lists that might contain lists:

<code><<def>> <<gen_dupes(>><<array>>)<<:>>
    <<unique>> <<=>> <<{>><<}>>
    <<for>> <<value>> <<in>> <<array>><<:>>
        <<is_list>> <<=>> <<False>>
        <<if>> <<type(>><<value>>) <<is>> <<list>><<:>>
            <<value>> <<=>> <<tuple(>><<value>>)
            <<is_list>> <<=>> <<True>>

        <<if>> <<value>> <<in>> <<unique>> <<and>> <<unique>>[<<value>>]<<:>>
            <<unique>>[<<value>>] <<=>> <<False>>
            <<if>> <<is_list>><<:>>
                <<value>> <<=>> <<list(>><<value>>)

            <<yield>> <<value>>
        <<else>><<:>>
            <<unique>>[<<value>>] <<=>> <<True>>

<<array>> <<=>> [<<1>>, <<2>>, <<2>>, [<<1>>, <<2>>], <<3>>, <<4>>, [<<1>>, <<2>>], <<5>>, <<2>>, <<6>>, <<6>>]
<<print(>><<list(>><<gen_dupes(>><<array>>)))
# <<=&gt;>> <<[2>>, <<[1>>, <<2]>>, <<6]>>
</code>
"
32555515|"Below is a ""standard recursive answer"", similar to the other similar answer https://stackoverflow.com/a/23743696/711085 . (We don't realistically have to worry about running out of stack space since there's no way we could process all N! permutations.)

It visits every element in turn, and either takes it or leaves it (we can directly see the 2^N cardinality from this algorithm).

<code><<def>> <<combs(>><<xs>>, <<i>><<=>><<0>>)<<:>>
    <<if>> <<i>><<==>><<len(>><<xs>>)<<:>>
        <<yield>> ()
        <<return>>
    <<for>> <<c>> <<in>> <<combs(>><<xs>>,<<i>>+<<1>>)<<:>>
        <<yield>> <<c>>
        <<yield>> <<c>>+(<<xs>>[<<i>>],)
</code>



Demo:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<list(>> <<combs(>><<range(>><<5>>)) )
[(), (<<0>>,), (<<1>>,), (<<1>>, <<0>>), (<<2>>,), (<<2>>, <<0>>), (<<2>>, <<1>>), (<<2>>, <<1>>, <<0>>), (<<3>>,), (<<3>>, <<0>>), (<<3>>, <<1>>), (<<3>>, <<1>>, <<0>>), (<<3>>, <<2>>), (<<3>>, <<2>>, <<0>>), (<<3>>, <<2>>, <<1>>), (<<3>>, <<2>>, <<1>>, <<0>>), (<<4>>,), (<<4>>, <<0>>), (<<4>>, <<1>>), (<<4>>, <<1>>, <<0>>), (<<4>>, <<2>>), (<<4>>, <<2>>, <<0>>), (<<4>>, <<2>>, <<1>>), (<<4>>, <<2>>, <<1>>, <<0>>), (<<4>>, <<3>>), (<<4>>, <<3>>, <<0>>), (<<4>>, <<3>>, <<1>>), (<<4>>, <<3>>, <<1>>, <<0>>), (<<4>>, <<3>>, <<2>>), (<<4>>, <<3>>, <<2>>, <<0>>), (<<4>>, <<3>>, <<2>>, <<1>>), (<<4>>, <<3>>, <<2>>, <<1>>, <<0>>)]

<<&gt>>;<<&gt>>;<<&gt>>; <<list(>><<sorted(>> <<combs(>><<range(>><<5>>)), <<key>><<=>><<len>>))
[(), 
 (<<0>>,), (<<1>>,), (<<2>>,), (<<3>>,), (<<4>>,), 
 (<<1>>, <<0>>), (<<2>>, <<0>>), (<<2>>, <<1>>), (<<3>>, <<0>>), (<<3>>, <<1>>), (<<3>>, <<2>>), (<<4>>, <<0>>), (<<4>>, <<1>>), (<<4>>, <<2>>), (<<4>>, <<3>>), 
 (<<2>>, <<1>>, <<0>>), (<<3>>, <<1>>, <<0>>), (<<3>>, <<2>>, <<0>>), (<<3>>, <<2>>, <<1>>), (<<4>>, <<1>>, <<0>>), (<<4>>, <<2>>, <<0>>), (<<4>>, <<2>>, <<1>>), (<<4>>, <<3>>, <<0>>), (<<4>>, <<3>>, <<1>>), (<<4>>, <<3>>, <<2>>), 
 (<<3>>, <<2>>, <<1>>, <<0>>), (<<4>>, <<2>>, <<1>>, <<0>>), (<<4>>, <<3>>, <<1>>, <<0>>), (<<4>>, <<3>>, <<2>>, <<0>>), (<<4>>, <<3>>, <<2>>, <<1>>), 
 (<<4>>, <<3>>, <<2>>, <<1>>, <<0>>)]

<<&gt>>;<<&gt>>;<<&gt>>; <<len(>><<set(>><<combs(>><<range(>><<5>>))))
<<32>>
</code>
"
6347576|"Here is a variant on Alec Thomas's solution:

<code><<def>> <<enum(>><<*>><<args>>, <<**>><<kwargs>>)<<:>>
    <<return>> <<type(>>'<<Enum>>', (), <<dict(>>(<<y>>, <<x>>) <<for>> <<x>>, <<y>> <<in>> <<enumerate(>><<args>>), <<**>><<kwargs>>)) 

<<x>> <<=>> <<enum(>>'<<POOH>>', '<<TIGGER>>', '<<EEYORE>>', '<<ROO>>', '<<PIGLET>>', '<<RABBIT>>', '<<OWL>>')
<<assert>> <<x>>.<<POOH>> <<==>> <<0>>
<<assert>> <<x>>.<<TIGGER>> <<==>> <<1>>
</code>
"
32649302|"<code><<from>> <<operator>> <<import>> <<truediv>>

<<c>> <<=>> <<truediv(>><<a>>, <<b>>)
</code>
"
35199035|"Here is a tiny timer class that returns ""hh:mm:ss"" string: 

<code><<class>> <<Timer>><<:>>
  <<def>> <<__init__(>><<self>>)<<:>>
    <<self>>.<<start>> <<=>> <<time>>.<<time(>>)

  <<def>> <<restart(>><<self>>)<<:>>
    <<self>>.<<start>> <<=>> <<time>>.<<time(>>)

  <<def>> <<get_time_hhmmss(>><<self>>)<<:>>
    <<end>> <<=>> <<time>>.<<time(>>)
    <<m>>, <<s>> <<=>> <<divmod(>><<end>> - <<self>>.<<start>>, <<60>>)
    <<h>>, <<m>> <<=>> <<divmod(>><<m>>, <<60>>)
    <<time_str>> <<=>> ""<<%>><<0>><<2>><<d>><<:>><<%>><<0>><<2>><<d>><<:>><<%>><<0>><<2>><<d>>"" <<%>> (<<h>>, <<m>>, <<s>>)
    <<return>> <<time_str>>
</code>

Usage: 

<code># <<Start>> <<timer>>
<<my_timer>> <<=>> <<Timer(>>)

# <<...>> <<do>> <<something>>

# <<Get>> <<time>> <<string:>>
<<time_hhmmss>> <<=>> <<my_timer>>.<<get_time_hhmmss(>>)
<<print(>>""<<Time>> <<elapsed>><<:>> <<%>><<s>>"" <<%>> <<time_hhmmss>> )

# <<...>> <<use>> <<the>> <<timer>> <<again>>
<<my_timer>>.<<restart(>>)

# <<...>> <<do>> <<something>>

# <<Get>> <<time:>>
<<time_hhmmss>> <<=>> <<my_timer>>.<<get_time_hhmmss(>>)

# <<...>> <<etc>>
</code>
"
16637874|"Just an FYI adding to Chris. B (best answer):

<code><<d>> <<=>> <<defaultdict(>><<int>>)
</code>

Works as well; the reason is that calling <code><<int(>>)</code> returns <code><<0>></code> which is what <code><<defaultdict>></code> does behind the scenes (when constructing a dictionary), hence the name ""Factory Function"" in the documentation.
"
5574749|"I would say that your first approach:

<code><<print>> <<&gt>>;<<&gt>>; <<sys>>.<<stderr>>, '<<spam>>' 
</code>

is the ""One . . . obvious way to do it""  The others don't satisfy rule #1 (""Beautiful is better than ugly."")
"
8369232|"<code><<f>> <<=>> <<open(>>'<<data>>.<<txt>>','<<r>>')
<<string>> <<=>> """"
<<while>> <<1>><<:>>
    <<line>> <<=>> <<f>>.<<readline(>>)
    <<if>> <<not>> <<line>><<:>><<break>>
    <<string>> <<+=>> <<line>>

<<f>>.<<close(>>)


<<print>> <<string>>
</code>
"
35041435|"<code><<pip>> <<install>> -<<U>> <<setuptools>></code> and <code><<easy_install>></code> was putting egg-info in the wrong directory.

Then I just reinstalled <code><<apt>>-<<get>> <<install>> <<python>>-<<dev>></code>.
Let me install the drivers I want after that
"
1810760|"Try <code><<os>>.<<chdir>></code>


<code><<os>>.<<chdir(>><<path>>)
</code>
  
          Change the current working directory to path. Availability: Unix, Windows.

"
1229342|"Like other people have said, generally Python strings are supposed to be immutable.

However, if you are using CPython, the implementation at python.org, it is possible to use ctypes to modify the string structure in memory.

Here is an example where I use the technique to clear a string.

Mark data as sensitive in python

I mention this for the sake of completeness, and this should be your last resort as it is hackish.
"
28576383|"
  How do I get the current time in Python?


The <code><<time>></code> module

The <code><<time>></code> module provides functions that tells us the time in ""seconds since the epoch"" as well as other utilities.

<code><<import>> <<time>>
</code>

Unix Epoch Time

This is the format you should get timestamps in for saving in databases. It is a simple floating point number that can be converted to an integer. It is also good for arithmetic in seconds, as it represents the number of seconds since Jan 1, 1970 00:00:00, and it is memory light relative to the other representations of time we'll be looking at next:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<time>>.<<time(>>)
<<1424233311.771502>>
</code>

This timestamp does not account for leap-seconds, so it's not linear - leap seconds are ignored. So while it is not equivalent to the international UTC standard, it is close, and therefore quite good for most cases of record-keeping. 

This is not ideal for human scheduling, however. If you have a future event you wish to take place at a certain point in time, you'll want to store that time with a string that can be parsed into a datetime object or a serialized datetime object (these will be described later).

<code><<time>>.<<ctime>></code>

You can also represent the current time in the way preferred by your operating system (which means it can change when you change your system preferences, so don't rely on this to be standard across all systems, as I've seen others expect). This is typically user friendly, but doesn't typically result in strings one can sort chronologically:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<time>>.<<ctime(>>)
'<<Tue Feb>> <<17>> <<23:21:56>> <<2015>>'
</code>

You can hydrate timestamps into human readable form with <code><<ctime>></code> as well:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<time>>.<<ctime(>><<1424233311.771502>>)
'<<Tue Feb>> <<17>> <<23:21:51>> <<2015>>'
</code>

This conversion is also not good for record-keeping (except in text that will only be parsed by humans - and with improved Optical Character Recognition and Artificial Intelligence, I think the number of these cases will diminish).

<code><<datetime>></code> module

The <code><<datetime>></code> module is also quite useful here:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<import>> <<datetime>>
</code>

<code><<datetime>>.<<datetime>>.<<now>></code>

The <code><<datetime>>.<<now>></code> is a class method that returns the current time. It uses the <code><<time>>.<<localtime>></code> without the timezone info (if not given, otherwise see timezone aware below). It has a representation (which would allow you to recreate an equivalent object) echoed on the shell, but when printed (or coerced to a <code><<str>></code>), it is in human readable (and nearly ISO) format, and the lexicographic sort is equivalent to the chronological sort:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<datetime>>.<<datetime>>.<<now(>>)
<<datetime>>.<<datetime(>><<2015>>, <<2>>, <<17>>, <<23>>, <<43>>, <<49>>, <<94252>>)
<<&gt>>;<<&gt>>;<<&gt>>; <<print(>><<datetime>>.<<datetime>>.<<now(>>))
<<2015>>-<<0>><<2>>-<<17>> <<23>><<:>><<43>><<:>><<51.782461>>
</code>

datetime's <code><<utcnow>></code>

You can get a datetime object in UTC time, a global standard, by doing this:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<datetime>>.<<datetime>>.<<utcnow(>>)
<<datetime>>.<<datetime(>><<2015>>, <<2>>, <<18>>, <<4>>, <<53>>, <<28>>, <<394163>>)
<<&gt>>;<<&gt>>;<<&gt>>; <<print(>><<datetime>>.<<datetime>>.<<utcnow(>>))
<<2015>>-<<0>><<2>>-<<18>> <<0>><<4>><<:>><<53>><<:>><<31.783988>>
</code>

UTC is a time standard that is nearly equivalent to the GMT timezone. (While GMT and UTC do not change for Daylight Savings Time, their users may switch to other timezones, like British Summer Time, during the Summer.) 

datetime timezone aware

However, none of the datetime objects we've created so far can be easily converted to various timezones. We can solve that problem with the <code><<pytz>></code> module:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<import>> <<pytz>>
<<&gt>>;<<&gt>>;<<&gt>>; <<then>> <<=>> <<datetime>>.<<datetime>>.<<now(>><<pytz>>.<<utc>>)
<<&gt>>;<<&gt>>;<<&gt>>; <<then>>
<<datetime>>.<<datetime(>><<2015>>, <<2>>, <<18>>, <<4>>, <<55>>, <<58>>, <<753949>>, <<tzinfo>><<=>><<&lt>>;<<UTC>><<&gt>>;)
</code>

Equivalently, in Python 3 we have the <code><<timezone>></code> class with a utc <code><<timezone>></code> instance attached, which also makes the object timezone aware (but to convert to another timezone without the handy <code><<pytz>></code> module is left as an exercise to the reader):

<code><<&gt>>;<<&gt>>;<<&gt>>; <<datetime>>.<<datetime>>.<<now(>><<datetime>>.<<timezone>>.<<utc>>)
<<datetime>>.<<datetime(>><<2015>>, <<2>>, <<18>>, <<22>>, <<31>>, <<56>>, <<564191>>, <<tzinfo>><<=>><<datetime>>.<<timezone>>.<<utc>>)
</code>

And we see we can easily convert to timezones from the original utc object.

<code><<&gt>>;<<&gt>>;<<&gt>>; <<print(>><<then>>)
<<2015>>-<<0>><<2>>-<<18>> <<0>><<4>><<:>><<55>><<:>><<58.753949>>+<<00>><<:>><<00>>
<<&gt>>;<<&gt>>;<<&gt>>; <<print(>><<then>>.<<astimezone(>><<pytz>>.<<timezone(>>'US/Eastern')))
<<2015>>-<<0>><<2>>-<<17>> <<23>><<:>><<55>><<:>><<58.753949>>-<<0>><<5>><<:>><<00>>
</code>

You can also make a naive datetime object aware with the <code><<pytz>></code> timezone <code><<localize>></code> method, or by replacing the tzinfo attribute (with <code><<replace>></code>, this is done blindly), but these are more last resorts than best practices:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<pytz>>.<<utc>>.<<localize(>><<datetime>>.<<datetime>>.<<utcnow(>>))
<<datetime>>.<<datetime(>><<2015>>, <<2>>, <<18>>, <<6>>, <<6>>, <<29>>, <<32285>>, <<tzinfo>><<=>><<&lt>>;<<UTC>><<&gt>>;)
<<&gt>>;<<&gt>>;<<&gt>>; <<datetime>>.<<datetime>>.<<utcnow(>>).<<replace(>><<tzinfo>><<=>><<pytz>>.<<utc>>)
<<datetime>>.<<datetime(>><<2015>>, <<2>>, <<18>>, <<6>>, <<9>>, <<30>>, <<728550>>, <<tzinfo>><<=>><<&lt>>;<<UTC>><<&gt>>;)
</code>

The <code><<pytz>></code> module allows us to make our <code><<datetime>></code> objects timezone aware and convert the times to the hundreds of timezones available in the <code><<pytz>></code> module.

One could ostensibly serialize this object for UTC time and store that in a database, but it would require far more memory and be more prone to error than simply storing the Unix Epoch time, which I demonstrated first. 

The other ways of viewing times are much more error prone, especially when dealing with data that may come from different time zones. You want there to be no confusion as to which timezone a string or serialized datetime object was intended for.

If you're displaying the time with Python for the user, <code><<ctime>></code> works nicely, not in a table (it doesn't typically sort well), but perhaps in a clock. However, I personally recommend, when dealing with time in Python, either using Unix time, or a timezone aware UTC <code><<datetime>></code> object. 
"
1207460|"Your best approach for such an example would be a list comprehension

<code><<somelist>> <<=>> [<<tup>> <<for>> <<tup>> <<in>> <<somelist>> <<if>> <<determine(>><<tup>>)]
</code>

In cases where you're doing something more complex than calling a <code><<determine>></code> function, I prefer constructing a new list and simply appending to it as I go.  For example

<code><<newlist>> <<=>> []
<<for>> <<tup>> <<in>> <<somelist>><<:>>
    # <<lots>> <<of>> <<code>> <<here>>, <<possibly>> <<setting>> <<things>> <<up>> <<for>> <<calling>> <<determine>>
    <<if>> <<determine(>><<tup>>)<<:>>
        <<newlist>>.<<append(>><<tup>>)
<<somelist>> <<=>> <<newlist>>
</code>

Copying the list using <code><<remove>></code> might make your code look a little cleaner, as described in one of the answers below.  You should definitely not do this for extremely large lists, since this involves first copying the entire list, and also performing an <code><<O(>><<n>>)</code> <code><<remove>></code> operation for each element being removed, making this an <code><<O(>><<n>><<^>><<2>>)</code> algorithm.

<code><<for>> <<tup>> <<in>> <<somelist>>[<<:>>]<<:>>
    # <<lots>> <<of>> <<code>> <<here>>, <<possibly>> <<setting>> <<things>> <<up>> <<for>> <<calling>> <<determine>>
    <<if>> <<determine(>><<tup>>)<<:>>
        <<newlist>>.<<append(>><<tup>>)
</code>
"
326279|"Note that rstrip doesn't act exactly like Perl's chomp() because it doesn't modify the string. That is, in Perl:

<code>$<<x>><<=>>""<<a>>\<<n>>"";

<<chomp>> $<<x>>
</code>

results in <code>$<<x>></code> being <code>""<<a>>""</code>.

but in Python:

<code><<x>><<=>>""<<a>>\<<n>>""

<<x>>.<<rstrip(>>)
</code>

will mean that the value of <code><<x>></code> is still <code>""<<a>>\<<n>>""</code>. Even <code><<x>><<=>><<x>>.<<rstrip(>>)</code> doesn't always give the same result, as it strips all whitespace from the end of the string, not just one newline at most.
"
17016257|"Edit 2016

As Raymond pointed out, in python 3.5+ where <code><<OrderedDict>></code> is implemented in C, the list comprehension approach will be slower than <code><<OrderedDict>></code> (unless you actually need the list at the end - and even then, only if the input is very short). So the best solution for 3.5+ is <code><<OrderedDict>></code>.

Important Edit 2015

As @abarnert notes, the <code><<more_itertools>></code> library (<code><<pip>> <<install>> <<more_itertools>></code>) contains a <code><<unique_everseen>></code> function that is built to solve this problem without any unreadable (<code><<not>> <<seen>>.<<add>></code>) mutations in list comprehensions. This is also the fastest solution too:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<from>>  <<more_itertools>> <<import>> <<unique_everseen>>
<<&gt>>;<<&gt>>;<<&gt>>; <<items>> <<=>> [<<1>>, <<2>>, <<0>>, <<1>>, <<3>>, <<2>>]
<<&gt>>;<<&gt>>;<<&gt>>; <<list(>><<unique_everseen(>><<items>>))
[<<1>>, <<2>>, <<0>>, <<3>>]
</code>

Just one simple library import and no hacks. 
This comes from an implementation of the itertools recipe <code><<unique_everseen>></code> which looks like:

<code><<def>> <<unique_everseen(>><<iterable>>, <<key>><<=>><<None>>)<<:>>
    ""<<List>> <<unique>> <<elements>>, <<preserving>> <<order>>. <<Remember>> <<all>> <<elements>> <<ever>> <<seen>>.""
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # <<unique_everseen('ABBCcAD>>', <<str>>.lower) --&gt; A B C D
    <<seen>> <<=>> <<set(>>)
    <<seen_add>> <<=>> <<seen>>.<<add>>
    <<if>> <<key>> <<is>> <<None>><<:>>
        <<for>> <<element>> <<in>> <<filterfalse(>><<seen>>.<<__contains__>>, <<iterable>>)<<:>>
            <<seen_add(>><<element>>)
            <<yield>> <<element>>
    <<else>><<:>>
        <<for>> <<element>> <<in>> <<iterable>><<:>>
            <<k>> <<=>> <<key(>><<element>>)
            <<if>> <<k>> <<not>> <<in>> <<seen>><<:>>
                <<seen_add(>><<k>>)
                <<yield>> <<element>>
</code>



In Python <code><<2.7>>+</code> the accepted common idiom (this works but isn't optimized for speed, i would now use <code><<unique_everseen>></code>) for this uses <code><<collections>>.<<OrderedDict>></code>:

Runtime: O(N)

<code><<&gt>>;<<&gt>>;<<&gt>>; <<from>> <<collections>> <<import>> <<OrderedDict>>
<<&gt>>;<<&gt>>;<<&gt>>; <<items>> <<=>> [<<1>>, <<2>>, <<0>>, <<1>>, <<3>>, <<2>>]
<<&gt>>;<<&gt>>;<<&gt>>; <<list(>><<OrderedDict>>.<<fromkeys(>><<items>>))
[<<1>>, <<2>>, <<0>>, <<3>>]
</code>

This looks much nicer than:

<code><<seen>> <<=>> <<set(>>)
[<<x>> <<for>> <<x>> <<in>> <<seq>> <<if>> <<x>> <<not>> <<in>> <<seen>> <<and>> <<not>> <<seen>>.<<add(>><<x>>)]
</code>

and doesn't utilize the ugly hack:

<code><<not>> <<seen>>.<<add(>><<x>>)
</code>

which relies on the fact that <code><<set>>.<<add>></code> is an in-place method that always returns <code><<None>></code> so <code><<not>> <<None>></code> evaluates to <code><<True>></code>. 

Note however that the hack solution is faster in raw speed though it has the same runtime complexity O(N).
"
9847269|"Use <code><<weekday(>>)</code> (docs):

<code><<&gt>>;<<&gt>>;<<&gt>>; <<import>> <<datetime>>
<<&gt>>;<<&gt>>;<<&gt>>; <<datetime>>.<<datetime>>.<<today(>>)
<<datetime>>.<<datetime(>><<2012>>, <<3>>, <<23>>, <<23>>, <<24>>, <<55>>, <<173504>>)
<<&gt>>;<<&gt>>;<<&gt>>; <<datetime>>.<<datetime>>.<<today(>>).<<weekday(>>)
<<4>>
</code>

From the documentation:


  Return the day of the week as an integer, where Monday is 0 and Sunday is 6.

"
36096474|"Install prerequisites.

<code><<sudo>> <<apt>>-<<get>> <<install>> <<python3>> <<python3>>-<<pip>> <<virtualenvwrapper>>
</code>

Create a Python3 based virtual environment. Optionally enable <code>--<<system>>-<<site>>-<<packages>></code> flag.

<code><<mkvirtualenv>> -<<p>> <</>><<usr>><</>><<bin>><</>><<python3>> <<&lt>>;<<venv>>-<<name>><<&gt>>;
</code>

Set into the virtual environment.

<code><<workon>> <<&lt>>;<<venv>>-<<name>><<&gt>>;
</code>

Install other requirements using <code><<pip>></code> package manager.

<code><<pip>> <<install>> -<<r>> <<requirements>>.<<txt>>
<<pip>> <<install>> <<&lt>>;<<package_name>><<&gt>>;
</code>



When working on multiple python projects simultaneously it is usually recommended to install common packages like <code><<Django>></code> globally and then reuse them in virtualenvs.

Using this technique saves a lot of time spent on fetching packages and installing them, apart from consuming minimal disk space and network bandwidth.

<code><<sudo>> -<<H>> <<pip3>> -<<v>> <<install>> <<Django>>
<<mkvirtualenv>> -<<p>> $(<<which>> <<python3>>) --<<system>>-<<site>>-<<packages>> <<&lt>>;<<venv>>-<<name>><<&gt>>;
</code>
"
3242895|"You can ask any object which module it came from by looking at its __ module__ property. This is useful, for example, if you're experimenting at the command line and have imported a lot of things.

Along the same lines, you can ask a module where it came from by looking at its __ file__ property.  This is useful when debugging path issues.
"
1952485|"This isn't sufficient: the object returned by <code><<__iter__>></code> must implement the iteration protocol (i.e. <code><<next>></code> method). See the relevant section in the documentation.

In Python, a good practice is to ""try and see"" instead of ""checking"".
"
10973829|"Simplifying a bit, you can imagine <code><<map(>>)</code> doing something like this:

<code><<def>> <<mymap(>><<func>>, <<lst>>)<<:>>
    <<result>> <<=>> []
    <<for>> <<e>> <<in>> <<lst>><<:>>
        <<result>>.<<append(>><<func(>><<e>>))
    <<return>> <<result>>
</code>

As you can see, it takes a function and a list, and returns a new list with the result of applying the function to each of the elements in the input list. I said ""simplifying a bit"" because in reality <code><<map(>>)</code> can process more than one iterable:


  If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. If one iterable is shorter than another it is assumed to be extended with None items.


For the second part in the question: What role does this play in making a Cartesian product? well, <code><<map(>>)</code> could be used for generating the cartesian product of a list like this:

<code><<lst>> <<=>> [<<1>>, <<2>>, <<3>>, <<4>>, <<5>>]

<<from>> <<operator>> <<import>> <<add>>
<<reduce(>><<add>>, <<map(>><<lambda>> <<i>><<:>> <<map(>><<lambda>> <<j>><<:>> (<<i>>, <<j>>), <<lst>>), <<lst>>))
</code>

... But to tell the truth, using <code><<product(>>)</code> is a much simpler and natural way to solve the problem:

<code><<from>> <<itertools>> <<import>> <<product>>
<<list(>><<product(>><<lst>>, <<lst>>))
</code>

Either way, the result is the cartesian product of <code><<lst>></code> as defined above:

<code>[(<<1>>, <<1>>), (<<1>>, <<2>>), (<<1>>, <<3>>), (<<1>>, <<4>>), (<<1>>, <<5>>),
 (<<2>>, <<1>>), (<<2>>, <<2>>), (<<2>>, <<3>>), (<<2>>, <<4>>), (<<2>>, <<5>>),
 (<<3>>, <<1>>), (<<3>>, <<2>>), (<<3>>, <<3>>), (<<3>>, <<4>>), (<<3>>, <<5>>),
 (<<4>>, <<1>>), (<<4>>, <<2>>), (<<4>>, <<3>>), (<<4>>, <<4>>), (<<4>>, <<5>>),
 (<<5>>, <<1>>), (<<5>>, <<2>>), (<<5>>, <<3>>), (<<5>>, <<4>>), (<<5>>, <<5>>)]
</code>
"
39079453|"For deleting files:

You can use <code><<unlink>></code> or <code><<remove>></code>. 

<code><<os>>.<<unlink(>><<path>>, <<*>>, <<dir_fd>><<=>><<None>>)
</code>

Or

<code><<os>>.<<remove(>><<path>>, <<*>>, <<dir_fd>><<=>><<None>>)
</code>

This functions removes (deletes) the file path. If path is a directory, <code><<OSError>></code> is raised.

In Python 2, if the path does not exist, <code><<OSError>></code> with [Errno 2] (<code><<ENOENT>></code>) is raised. In Python 3, <code><<FileNotFoundError>></code> with [Errno 2] (<code><<ENOENT>></code>) is raised. In Python 3, because <code><<FileNotFoundError>></code> is a subclass of <code><<OSError>></code>, catching the latter will catch the former.

For deleting folders:

<code><<os>>.<<rmdir(>><<path>>, <<*>>, <<dir_fd>><<=>><<None>>)
</code>

<code><<rmdir>></code> Remove (delete) the directory path. Only works when the directory is empty, otherwise, OSError is raised. 
In order to remove whole directory trees, <code><<shutil>>.<<rmtree(>>)</code> can be used.

<code><<shutil>>.<<rmtree(>><<path>>, <<ignore_errors>><<=>><<False>>, <<onerror>><<=>><<None>>)
</code>

<code><<shutil>>.<<rmtree>></code> Delete an entire directory tree. Path must point to a directory (but not a symbolic link to a directory). 

If ignore_errors is true, errors resulting from failed removals will be ignored and if false or omitted, such errors are handled by calling a handler specified by onerror or, if that is omitted, they raise an exception.

See also:

<code><<os>>.<<removedirs(>><<name>>)
</code>

<code><<os>>.<<removedirs(>><<name>>)</code> Remove directories recursively. Works like rmdir() except that, if the leaf directory is successfully removed, removedirs() tries to successively remove every parent directory mentioned in path until an error is raised (which is ignored, because it generally means that a parent directory is not empty). 

For example, os.removedirs('foo/bar/baz') will first remove the directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' if they are empty. 
"
38778859|"Yet another functional solution for Python 2:

<code><<from>> <<functools>> <<import>> <<partial>>

<<map(>><<partial(>><<map>>, <<int>>), <<T1>>)
</code>

Python 3 will be a little bit messy though:

<code><<list(>><<map(>><<list>>, <<map(>><<partial(>><<map>>, <<int>>), <<T1>>)))
</code>
"
18296313|"I recommend looking at docopt as a simple alternative to these others.

docopt is a new project that works by parsing your --help usage message rather than requiring you to implement everything yourself. You just have to put your usage message in the POSIX format.
"
1035419|"If the file is not too big that holding it in memory is a problem:

<code><<bytes_read>> <<=>> <<open(>>""<<filename>>"", ""<<rb>>"").<<read(>>)
<<for>> <<b>> <<in>> <<bytes_read>><<:>>
    <<process_byte(>><<b>>)
</code>

where process_byte represents some operation you want to perform on the passed-in byte.

If you want to process a chunk at a time:

<code><<file>> <<=>> <<open(>>""<<filename>>"", ""<<rb>>"")
<<try>><<:>>
    <<bytes_read>> <<=>> <<file>>.<<read(>><<CHUNKSIZE>>)
    <<while>> <<bytes_read>><<:>>
        <<for>> <<b>> <<in>> <<bytes_read>><<:>>
            <<process_byte(>><<b>>)
        <<bytes_read>> <<=>> <<file>>.<<read(>><<CHUNKSIZE>>)
<<finally>><<:>>
    <<file>>.<<close(>>)
</code>
"
15441162|"I like Spyder, it has many tools, such as profiling, intelligent indentation helper and a good autocompletion support

https://code.google.com/p/spyderlib/
"
1835599|"Generally speaking, the fact that a function which iterates over an object works on strings as well as tuples and lists is more feature than bug.  You certainly can use <code><<isinstance>></code> or duck typing to check an argument, but why should you?

That sounds like a rhetorical question, but it isn't.  The answer to ""why should I check the argument's type?"" is probably going to suggest a solution to the real problem, not the perceived problem.  Why is it a bug when a string is passed to the function?  Also:  if it's a bug when a string is passed to this function, is it also a bug if some other non-list/tuple iterable is passed to it?  Why, or why not?

I think that the most common answer to the question is likely to be that developers who write <code><<f(>>""<<abc>>"")</code> are expecting the function to behave as though they'd written <code><<f(>>[""<<abc>>""])</code>.  There are probably circumstances where it makes more sense to protect developers from themselves than it does to support the use case of iterating across the characters in a string.  But I'd think long and hard about it first.
"
4847186|"The type module also exists if you are checking more than ints and strings. 
http://docs.python.org/library/types.html
"
85489|"<code><<clock(>>) -<<&gt>>; <<floating>> <<point>> <<number>>

<<Return>> <<the>> <<CPU>> <<time>> <<or>> <<real>> <<time>> <<since>> <<the>> <<start>> <<of>> <<the>> <<process>> <<or>> <<since>>
<<the>> <<first>> <<call>> <<to>> <<clock(>>).  <<This>> <<has>> <<as>> <<much>> <<precision>> <<as>> <<the>> <<system>>
<<records>>.

<<time(>>) -<<&gt>>; <<floating>> <<point>> <<number>>

<<Return>> <<the>> <<current>> <<time>> <<in>> <<seconds>> <<since>> <<the>> <<Epoch>>.
<<Fractions>> <<of>> <<a>> <<second>> <<may>> <<be>> <<present>> <<if>> <<the>> <<system>> <<clock>> <<provides>> <<them>>.
</code>

Usually time() is more precise, because operating systems do not store the process running time with the precision they store the system time (ie, actual time)
"
22893823|"You can try this code

<code><<import>> <<glob>>
<<import>> <<os>>
<<filenames_without_extension>> <<=>> [<<os>>.<<path>>.<<basename(>><<c>>).<<split(>>'.')[<<0>><<:>><<1>>][<<0>>] <<for>> <<c>> <<in>> <<glob>>.<<glob(>>'<<your>>/<<files>>/<<dir>>/*.<<txt>>')]
<<filenames_with_extension>> <<=>> [<<os>>.<<path>>.<<basename(>><<c>>) <<for>> <<c>> <<in>> <<glob>>.<<glob(>>'<<your>>/<<files>>/<<dir>>/*.<<txt>>')]
</code>
"
1207634|"Well, if you're willing/ready to switch to Python 3 (which you may not be due to the backwards incompatibility with some Python 2 code), you don't have to do any converting; all text in Python 3 is represented with Unicode strings, which also means that there's no more usage of the <code><<u'&lt;text&gt;>>'</code> syntax. You also have what are, in effect, strings of bytes, which are used to represent data (which may be an encoded string).

http://docs.python.org/3.1/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit

(Of course, if you're currently using Python 3, then the problem is likely something to do with how you're attempting to save the text to a file.)
"
13485766|"It's difficult to make <code><<del>> <<df>>.<<column_name>></code> work simply as the result of syntactic limitations in Python. <code><<del>> <<df>>[<<name>>]</code> gets translated to <code><<df>>.<<__delitem__(>><<name>>)</code> under the covers by Python
"
438845|"<code><<reload(>><<module>>)</code>, but only if it's completely stand-alone. If anything else has a reference to the module (or any object belonging to the module), then you'll get subtle and curious errors caused by the old code hanging around longer than you expected, and things like <code><<isinstance>></code> not working across different versions of the same code.

If you have one-way dependencies, you must also reload all modules that depend on the the reloaded module to get rid of all the references to the old code. And then reload modules that depend on the reloaded modules, recursively.

If you have circular dependencies, which is very common for example when you are dealing with reloading a package, you must unload all the modules in the group in one go. You can't do this with <code><<reload(>>)</code> because it will re-import each module before its dependencies have been refreshed, allowing old references to creep into new modules.

The only way to do it in this case is to hack <code><<sys>>.<<modules>></code>, which is kind of unsupported. You'd have to go through and delete each <code><<sys>>.<<modules>></code> entry you wanted to be reloaded on next import, and also delete entries whose values are <code><<None>></code> to deal with an implementation issue to do with caching failed relative imports. It's not terribly nice but as long as you have a fully self-contained set of dependencies that doesn't leave references outside its codebase, it's workable.

It's probably best to restart the server. :-)
"
1010597|"There is also <code><<argparse>></code> stdlib module (an ""impovement"" on stdlib's <code><<optparse>></code> module). Example from the introduction to argparse:

<code># <<script>>.<<py>>
<<import>> <<argparse>>

<<if>> <<__name__>> <<==>> '<<__main__>>'<<:>>
    <<parser>> <<=>> <<argparse>>.<<ArgumentParser(>>)
    <<parser>>.<<add_argument(>>
        '<<integers>>', <<metavar>><<=>>'<<int>>', <<type>><<=>><<int>>, <<choices>><<=>><<range(>><<10>>),
         <<nargs>><<=>>'<<+>>', <<help>><<=>>'<<an>> <<integer>> <<in>> <<the>> <<range>> <<0..9>>')
    <<parser>>.<<add_argument(>>
        '<<--sum>>', <<dest>><<=>>'<<accumulate>>', <<action>><<=>>'<<store_const>>', <<const>><<=>><<sum>>,
        <<default>><<=>><<max>>, <<help>><<=>>'<<sum>> <<the>> <<integers>> (<<default:>> <<find>> <<the>> <<max>>)')

    <<args>> <<=>> <<parser>>.<<parse_args(>>)
    <<print(>><<args>>.<<accumulate(>><<args>>.<<integers>>))
</code>

Usage:

<code>$ <<script>>.<<py>> <<1>> <<2>> <<3>> <<4>>
<<4>>

$ <<script>>.<<py>> --<<sum>> <<1>> <<2>> <<3>> <<4>>
<<10>>
</code>
"
1019572|"One line, probably pretty fast:

<code><<num_lines>> <<=>> <<sum(>><<1>> <<for>> <<line>> <<in>> <<open(>>'<<myfile>>.<<txt>>'))
</code>
"
2294513|"<code><<string>>.<<find(>><<character>>)  
<<string>>.<<index(>><<character>>)  
</code>

Perhaps you'd like to have a look at the documentation to find out what the difference between the two is.
"
613228|"Dicts can't be sorted, but you can build a sorted list from them.

A sorted list of dict values:

<code><<sorted(>><<d>>.<<values(>>))
</code>

A list of (key, value) pairs, sorted by value:

<code><<from>> <<operator>> <<import>> <<itemgetter>>
<<sorted(>><<d>>.<<items(>>), <<key>><<=>><<itemgetter(>><<1>>))
</code>
"
7817348|"Use ValueSortedDict from dicts:

<code><<from>> <<dicts>>.<<sorteddict>> <<import>> <<ValueSortedDict>>
<<d>> <<=>> <<{>><<1>><<:>> <<2>>, <<3>><<:>> <<4>>, <<4>><<:>><<3>>, <<2>><<:>><<1>>, <<0>><<:>><<0>><<}>>
<<sorted_dict>> <<=>> <<ValueSortedDict(>><<d>>)
<<print>> <<sorted_dict>>.<<items(>>) 

[(<<0>>, <<0>>), (<<2>>, <<1>>), (<<1>>, <<2>>), (<<4>>, <<3>>), (<<3>>, <<4>>)]
</code>
"
227466|"You are looking for:

<code><<ord(>>)
</code>
"
7838845|"A nice profiling module is the line_profiler (called using the script kernprof.py).  It can be downloaded here.

My understanding is that cProfile only gives information about total time spent in each function.  So individual lines of code are not timed.  This is an issue in scientific computing since often one single line can take a lot of time.  Also, as I remember, cProfile didn't catch the time I was spending in say numpy.dot.
"
14833803|"To RUN press CtrlB (answer by matiit)

But when CtrlB does not work, Sublime Text probably can't find the Python Interpreter. When trying to run your program, see the log and find the reference to Python in path.

<code>[<<cmd>><<:>>  [<<u'python>>', <<u'-u>>', <<u'C:\\scripts\\test>>.<<py>>']]
[<<path>><<:>> ...;<<C>><<:>>\<<Python27>> <<32>><<bit>>;...]
</code>

The point is that it tries to run python via command line, the cmd looks like:

<code><<python>> -<<u>> <<C>><<:>>\<<scripts>>\<<test>>.<<py>>
</code>

If you can't run python from cmd, Sublime Text can't too.
(Try it yourself in cmd, type python in it and run it, python commandline should appear)

SOLUTION

You can either change the Sublime Text build formula or the System <code><<%>><<PATH>><<%>></code>.  


To set your <code><<%>><<PATH>><<%>></code>:
*You will need to restart your editor to load new <code><<%>><<PATH>><<%>></code>


Run Command Line* and enter this command: *needs to be run as administrator
<code><<SETX>> <</>><<M>> <<PATH>> ""<<%>><<PATH>><<%>>;<<&lt>>;<<python_folder>><<&gt>>;""</code>
for example: <code><<SETX>> <</>><<M>> <<PATH>> ""<<%>><<PATH>><<%>>;<<C>><<:>>\<<Python27>>;<<C>><<:>>\<<Python27>>\<<Scripts>>""</code>  
OR manually: (preferable)
Add <code>;<<C>><<:>>\<<Python27>>;<<C>><<:>>\<<Python27>>\<<Scripts>></code> at the end of the string.
  

To set the interpreter's path without messing with System <code><<%>><<PATH>><<%>></code> see this answer by ppy.

"
28811205|"Simply call del d['key'].

However, in production, it is always a good practice to check if 'key' exists in d.

<code><<if>> '<<key>>' <<in>> <<d>><<:>>
    <<del>> <<d>>['<<key>>']
</code>
"
34971949|"<code><<import>> <<os>>;
<<print>> <<os>>.<<getcwd(>>); # <<Prints>> <<the>> <<working>> <<directory>>
</code>

To set the working directory:

<code><<os>>.<<chdir(>>'<<c:\\Users\uname\desktop\python>>') # <<Provide>> <<the>> <<path>> <<here>>
</code>
"
29289118|"<code><<with>> <<open(>><<fname>>) <<as>> <<fo>><<:>>
        <<data>><<=>><<fo>>.<<read(>>).<<replace(>>'<<\n>>', ' ').<<replace>> (',', ' ')
</code>

This should answer your question. The replace function will act as delimiter to strip the file.
"
23102554|"Lets Say I h'v a Dictionary D with elements below. To sort just use key argument in sorted to pass custom function as below

<code><<D>> <<=>> <<{>>'<<eggs>>'<<:>> <<3>>, '<<ham>>'<<:>> <<1>>, '<<spam>>'<<:>> <<2>><<}>>

<<def>> <<get_count(>><<tuple>>)<<:>>
    <<return>> <<tuple>>[<<1>>]

<<sorted(>><<D>>.<<items(>>), <<key>> <<=>> <<get_count>>, <<reverse>><<=>><<True>>)
<<or>>
<<sorted(>><<D>>.<<items(>>), <<key>> <<=>> <<lambda>> <<x>><<:>> <<x>>[<<1>>], <<reverse>><<=>><<True>>)  <<avoiding>> <<get_count>> <<function>> <<call>>
</code>

https://wiki.python.org/moin/HowTo/Sorting/#Key_Functions
"
89267|"<code><<os>>.<<system>></code> has been superseded by the <code><<subprocess>></code> module. Use subproccess instead.
"
2294502|"There are two string methods for this, <code><<find>></code> and <code><<index>></code>.

Example:

<code><<&gt>>;<<&gt>>;<<&gt>>; <<myString>> <<=>> ""<<Position>> <<of>> <<a>> <<character>>""
<<&gt>>;<<&gt>>;<<&gt>>; <<myString>>.<<index(>>'<<s>>')
<<2>>
</code>

The difference is that <code><<find>></code> returns <code>-<<1>></code> when what you're looking for isn't found. <code><<index>></code> throws an exception.


  Function <code><<str>>.<<find(>><<sub>>[, <<start>>[, <<end>>]])</code>
  Return the lowest index in the string where substring sub is found, such that sub is contained in the range <code>[<<start>>, <<end>>]</code>. Optional arguments start and end are interpreted as in slice notation. Return <code>-<<1>></code> if sub is not found. 


And:


  Function <code><<str>>.<<index(>><<sub>>[, <<start>>[, <<end>>]])</code>
  Like <code><<find(>>)</code>, but <code><<raise>> <<ValueError>></code> when the substring is not found.

"
28867664|"I usually use: 

<code><<if>> ((<<cond1>> <<==>> '<<val1>>' <<and>> <<cond2>> <<==>> '<<val2>>' <<and>>
     <<cond3>> <<==>> '<<val3>>' <<and>> <<cond4>> <<==>> '<<val4>>'))<<:>>
    <<do_something(>>)
</code>
"
