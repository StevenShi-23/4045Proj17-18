20 top freq words:
Tokenization without stemming : ['I', 'Python', 'use', 'list', 'function', 'like', 'using', 'If', 'want', 'You', 'code', 'file', 'way', 'string', 'one', 'example',  'need',  'object', 'get', 'method']
Stem before tokenization : ['use', 'i', 'python', 'list', 'function', 'file', 'like', 'string', 'want', 'work', 'code', 'you', 'way', 'exampl', 'method', 'object', 'one', 'instal', 'need', 'get']

stemmed result and their morphological  word:
{'python': ['Python', 'python', 'pythonic', 'Pythonic', "'pythonic", "'python", 'pythoners', 'pythons', 'PYTHON', 'Pythons', "Python's", 'pythonators', 'Pythonically', "'Python", 'Pythoneers', 'Pythoning', "'Pythonic"],
'i': ['I', 'i', "'i'", "'I'"],
'get': ['get', 'getting', 'gets', 'Getting', 'GET', 'Get', "'getting", "'GET", "'get", 'Gets', "'gets", "'Get"],
'list': ['list', 'List', 'listing', 'Lists', 'lists', "'list", 'listed', 'listings', "'list'", 'LIST', "'List", 'Listing', "List'", "lists'"],
'function': ['function', 'functions', 'Function', 'functional', 'functionality', 'functioning', 'functionally', 'Functions', 'Functional', "'function", 'FUNCTION', "function'", 'FUNCTIONALLY'],
'method': ['method', 'methods', "method'", 'METHOD', 'Method', 'Methods', "'Method", 'methodically'],
'instal': ['installed', 'install', 'installation', 'installing', 'Installing', 'Install', 'installer', 'installations', 'installers', 'installs', "'Installing", 'Installation', 'Installers', 'INSTALLED', "'install", 'Installed', 'installable', 'Instal', 'instaled', 'instalation', 'Installer'],
'need': ['need', 'needed', 'needs', 'Need', 'Needed', 'needing'],
'one': ['one', 'One', 'ones', "'one", "'One", "'one'", "'ONE", 'ONE'],
'code': ['code', 'coding', 'codes', 'coded', 'Code', "code'", 'Coding', "'code", 'Codes', 'CODE'],
'way': ['way', 'ways', 'Way', 'WAY'],
'object': ['object', 'objects', "object'", 'Object', "'object", 'Objects', 'objected', 'OBJECT', 'objective', "'Object", "object's", "'object'"],
'work': ['working', 'work', 'works', 'WORKED', 'worked', 'Work', 'Works', 'Worked', 'Working', 'WORK', "works'", "work'", "'Works"],
'like': ['like', 'Like', 'likely', 'liked', "'like", 'likes', 'Likely'], 'string': ['string', 'strings', 'String', 'Strings',
'STRING', "'string", "string'", "'string'"],
'file': ['file', 'files', 'File', 'Files', "'file", 'FILE', "'file'", 'filed', "file'", "'File", 'FIle', "FILE'", "'files"],
'want': ['want', 'wanted', 'wants', 'wanting', 'Wanting', 'Want'],
'use': ['use', 'using', 'Using', 'useful', 'used', 'uses', 'Use', 'Useful', 'Uses', "'using", 'usefully', 'USE', 'usefulness', 'Used', "'Using", 'USe', 'USING'],
'you': ['you', "'you", 'You', 'YOU', "'You"],
'exampl': ['example', 'Example', 'examples', 'Examples', 'EXAMPLE', "'example", 'EXAMPLES', "'EXAMPLE'", "Example'"]}


3.4 - Further Analysis
Most frequent irregular tokens:
('.', 22768)
('=', 14723)
('-', 8969)
('&gt;&gt;&gt;', 5498)
('def', 3230)
('%', 2584)
('+', 2124)
('&gt;', 1601)
('==', 1457)
('*', 1290)
('&lt;', 1266)
('foo', 1033)
('sys', 1027)
('py', 757)
('!', 736)
('$', 723)
('|', 716)
('len(', 679)
('**', 624)
('datetime', 614)

Most frequent tokens (after joining code and text tokens, in the format of (token, frequency)):

('.', 22768)
('the', 21293)
('=', 14723)
('to', 12498)
('a', 10529)
('-', 8969)
('you', 8929)
('is', 8506)
('and', 6957)
('in', 6865)
('of', 6709)
('1', 5821)
('it', 5587)
('this', 5587)
('&gt;&gt;&gt;', 5498)
('for', 4802)
('that', 4379)
('python', 3955)
('if', 3733)
('0', 3656)
('can', 3654)
('2', 3562)
('i', 3422)
('def', 3230)
('as', 3215)
('use', 3193)
('import', 3192)
('x', 3139)
('with', 3056)
('be', 3036)
('print', 2901)
('self', 2845)
('3', 2751)
('%', 2584)
('not', 2429)
('return', 2348)
('or', 2263)
('are', 2207)
('an', 2200)
('on', 2181)
('+', 2124)
('but', 2117)
('b', 2060)
('your', 2000)
('will', 1982)
('s', 1963)
('list', 1892)
('have', 1854)
('os', 1775)
('from', 1732)
('4', 1725)
('using', 1641)
('do', 1607)
('function', 1604)
('&gt;', 1601)
('like', 1515)
('5', 1507)
('print(', 1500)
('by', 1489)
('which', 1484)

Sentense that contains irrgular tokens selected for POS-tagging:

&gt;&gt;&gt; l = list(1, 2, 3)
def uniq(input):
if value == None and conditionMet:
Just as a side note how would the implementation change if there is a dependency between foo and bar.
I am hoping it is possible to do without tinkering with sys.path.
I have a script named test1.py which is not in a module.
while len(alist) &gt; 0 : alist.pop()
Python datetime to string without microsecond component
Actually, don't show, just save to foo.png
plt.plot(x, np.sin(x**2))

[('&', 'CC'), ('gt', 'NN'), (';', ':'), ('&', 'CC'), ('gt', 'NN'), (';', ':'), ('&', 'CC'), ('gt', 'NN'), (';', ':'), ('l', 'CC'), ('=', 'JJ'), ('list', 'NN'), ('(', '('), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('3', 'CD'), (')', ')')]
[('def', 'NN'), ('uniq', 'NN'), ('(', '('), ('input', 'NN'), (')', ')'), (':', ':')]
[('if', 'IN'), ('value', 'NN'), ('==', 'NNP'), ('None', 'NNP'), ('and', 'CC'), ('conditionMet', 'NN'), (':', ':')]
[('Just', 'RB'), ('as', 'IN'), ('a', 'DT'), ('side', 'NN'), ('note', 'NN'), ('how', 'WRB'), ('would', 'MD'), ('the', 'DT'), ('implementation', 'NN'), ('change', 'NN'), ('if', 'IN'), ('there', 'EX'), ('is', 'VBZ'), ('a', 'DT'), ('dependency', 'NN'), ('between', 'IN'), ('foo', 'NN'), ('and', 'CC'), ('bar', 'NN'), ('.', '.')]
[('I', 'PRP'), ('am', 'VBP'), ('hoping', 'VBG'), ('it', 'PRP'), ('is', 'VBZ'), ('possible', 'JJ'), ('to', 'TO'), ('do', 'VB'), ('without', 'IN'), ('tinkering', 'VBG'), ('with', 'IN'), ('sys.path', 'NN'), ('.', '.')]
[('I', 'PRP'), ('have', 'VBP'), ('a', 'DT'), ('script', 'NN'), ('named', 'VBN'), ('test1.py', 'NN'), ('which', 'WDT'), ('is', 'VBZ'), ('not', 'RB'), ('in', 'IN'), ('a', 'DT'), ('module', 'NN'), ('.', '.')]
[('while', 'IN'), ('len', 'VBN'), ('(', '('), ('alist', 'NN'), (')', ')'), ('&', 'CC'), ('gt', 'NN'), (';', ':'), ('0', 'CD'), (':', ':'), ('alist.pop', 'NN'), ('(', '('), (')', ')')]
[('Python', 'NNP'), ('datetime', 'NN'), ('to', 'TO'), ('string', 'VBG'), ('without', 'IN'), ('microsecond', 'NN'), ('component', 'NN')]
[('Actually', 'RB'), (',', ','), ('do', 'VBP'), ("n't", 'RB'), ('show', 'VB'), (',', ','), ('just', 'RB'), ('save', 'VB'), ('to', 'TO'), ('foo.png', 'VB')]
[('plt.plot', 'NN'), ('(', '('), ('x', 'UH'), (',', ','), ('np.sin', 'JJ'), ('(', '('), ('x**2', 'NNP'), (')', ')'), (')', ')')]